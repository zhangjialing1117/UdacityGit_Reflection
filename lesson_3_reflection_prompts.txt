When would you want to create a remote repository rather than keeping all your work local?
    When collaborating with other users it's easier to share updates by using a remote repository. This way others can contribute, and get changes too.

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
    Changes can cause conflicts. If you are in the process of creating a new feature, you don't want to solve those conflicts but finish your feature first.
    This way you can keep focus and decide when you want to get the latest versions and integrate changes.
    
Describe the differences between forks, clones, and branches. When would you use one instead of another?
    A fork is a copy of a repository on GitHub. Use this when you want to make changes to a repository when you don't have access to the original repository.
    A clone is copy of a repository. This can be on the same machine, but it can also be a clone from a GitHub repository to your own machine. Use this for collaborating.
    Branches are leafs on the master branch. Those can be seen as a side track in which you can change code without changing the master branch. Use this for creating new features/bug fixes.

What is the benefit of having a copy of the last known state of the remote stored locally?
    You can work offline, it saves a lot of data overhead when pushing changes to github and it gives the possibility to do a quick check which changes are made in the online repo compared to the offline repository.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?
    Without Git or GitHub I have to sent files over via email/networkshare/dropbox etc. This will work but I'm loosing the history of changes. This makes it hard to combine the work of multiple people.
    The only thing I can think of that is easier without using Git is that you don't need to learn how Git works, and the other techniques are simpler.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?
    You want to make changes in a different branch so that the master branch always stays in a working state. By using a different branch, you can push your changes to GitHub for review by other people, without directly messing up the master branch.
    For small changes it is a lot quicker to make them directly in the master branch, but this comes with a risk.

Commands:

git remote  |    Show all remote locations for the repository
git remote add origin url |     Add a new remote location for the repository. Origin is the default name to use when you create only one remote location. Url should be the https url to the github repository.
git remove -v  |    Outputs the remote locations with verbose information (fetch and push urls)
git push origin master  |    Push the master branch to the remote location origin.
git pull origin master  |    Get the master branch from the remote location origin.
git pull origin master  |    = Git fetch origin + git merge master origin/master
git fetch origin  |    Get the changes from the remote location into the (hidden?) origin/master branch
